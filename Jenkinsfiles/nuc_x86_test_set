#!groovy

buildResults = [:]

bootJob  = 'Spectrum_OS/Testing/NUC_x86/nuc_x86_boot_test'
batJob   = 'Spectrum_OS/Testing/NUC_x86/nuc_x86_bat_test'
nucDirectory = 'nuc_test_results'
resultsPath = '/home/tc-agent02/Jenkins-agent/workspace/results'
imagePath = '"/files/nix/store/'+"${params.IMAGE}"+'"'
bootSuite = 'boot_test_nuc.robot'
batSuite = 'bat_test_nuc.robot'
vulnixURL = '"https://vedenemo.dev/webify/'+"${params.BUILD_ID}"+'/vulnix_'+"${params.BUILD_ID}"+'.html"'

def appendFile(String fileName, String line) {
    def current = ""
    if (fileExists(fileName)) {
        current = readFile fileName
    }
    writeFile file: fileName, text: current + "\n" + line
}

pipeline {
    agent { label 'tc-agent02' }
    stages {
      stage('Change USB HUB host to PC') {
          steps {
            script{
                sh './AcronameHubCLI -u 0'
                // wait that USB drive is mounted
                sh 'sleep 10'
                def output = sh (
                    script: 'lsblk -o model,name |grep PSSD',
                    returnStdout: true
                    ).trim()
                def list = output.split(' ')
                // Take last element which is the target USB device
                USBDEVICE = list[-1]
                println("USB device: ${USBDEVICE}")
             }
          }
      }
      stage('Write Spectrum OS image to USB disk') {
          steps {
            dir('/home/tc-agent02/Jenkins-agent/workspace/images/'){
              sh "sudo dd if=${params.IMAGE} of=/dev/sdb bs=1M status=progress conv=fsync"
             }
          }
      }
      stage('Change USB HUB host back to test device') {
          steps {
            script{
                sh './AcronameHubCLI -u 1'
             }
          }
      }
      stage('Create NUC buildID results directory') {
          steps {
            script{
                sh "mkdir ${resultsPath}/${params.BUILD_ID}/${nucDirectory}"
                // Copy initial index.html file to buildID directory
                sh "cp ${resultsPath}/index.html ${resultsPath}/${params.BUILD_ID}/"
                appendFile("${resultsPath}/${params.BUILD_ID}/index.html", "Here are the results of Hydra Spectrum-project's spectrum-nuc project:<BR>")
                appendFile("${resultsPath}/${params.BUILD_ID}/index.html", "Vulnix vulnerability test <A href=${vulnixURL}>result</A>.<BR>")
             }
          }
      }
      stage('Boot NUC') {
          steps {
          	script{
              // Make directory for test results
              sh "mkdir ${resultsPath}/${params.BUILD_ID}/${nucDirectory}/boot"
              build = build(
                  job: "${bootJob}", propagate: false,
                  parameters: [
                    [$class: 'StringParameterValue', name: 'RF_SUITE', value: "${bootSuite}"],
                    [$class: 'StringParameterValue', name: 'DESCRIPTION', value: "Hydra buildID: ${params.BUILD_ID}"]
                  ]
              )

              // copy report and log
              sh "cp ~/Jenkins-agent/workspace/${bootJob}/Robot-Framework/test-suites/report.html ${resultsPath}/${params.BUILD_ID}/${nucDirectory}/boot/report.html"
              sh "cp ~/Jenkins-agent/workspace/${bootJob}/Robot-Framework/test-suites/log.html ${resultsPath}/${params.BUILD_ID}/${nucDirectory}/boot/log.html"
              // add link to index.html
              appendFile("${resultsPath}/${params.BUILD_ID}/index.html", "Robot Framework boot test results: <A href='nuc_test_results/boot/report.html'>report</A>, <A href='nuc_test_results/boot/log.html'>log</A>.<BR>")
              if(build.result == "SUCCESS") {
                buildResults."boot" = "SUCCESS"
                echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
              } else {
                catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                              error("Build failed")
                }
              }
            }
          }
      }
      stage('BAT tests') {
          when {
            expression {
                buildResults.boot == 'SUCCESS'
            }
          }
          steps {
            script{
              // Make directory for test results
              sh "mkdir ${resultsPath}/${params.BUILD_ID}/${nucDirectory}/bat"
              build = build(
                  job: "${batJob}",
                  parameters: [
                    [$class: 'StringParameterValue', name: 'RF_SUITE', value: "${batSuite}"],
                    [$class: 'StringParameterValue', name: 'DESCRIPTION', value: "Hydra buildID: ${params.BUILD_ID}"]
                  ]
              )
              // copy report and log
              sh "cp ~/Jenkins-agent/workspace/${batJob}/Robot-Framework/test-suites/report.html ${resultsPath}/${params.BUILD_ID}/${nucDirectory}/bat/report.html"
              sh "cp ~/Jenkins-agent/workspace/${batJob}/Robot-Framework/test-suites/log.html ${resultsPath}/${params.BUILD_ID}/${nucDirectory}/bat/log.html"
              // add link to index.html
              appendFile("${resultsPath}/${params.BUILD_ID}/index.html", "Robot Framework bat test results: <A href='nuc_test_results/bat/report.html'>report</A>, <A href='nuc_test_results/bat/log.html'>log</A>.<BR>")
              if(build.result == "SUCCESS") {
                buildResults."bat" = "SUCCESS"
                echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
              } else {
                catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                              error("Build failed")
                }
              }
             }
          }
      }
      stage('Bublish reports') {
          steps {
             dir("${resultsPath}/"){
                appendFile("${params.BUILD_ID}/index.html", "You can download tested image here: <A href=${imagePath}>${params.IMAGE}</A>.")
                appendFile("${params.BUILD_ID}/index.html", '</P>\n</BODY>\n</HTML>')
                sh "scp -s -i ~/.ssh/sftpid_ed25519 -r ${params.BUILD_ID} sftp_user@95.175.105.23:/upload"
                sh "ssh -i ~/.ssh/trigid_ed25519 script_trigger@95.175.105.23 ${params.BUILD_ID}"
             }
          }
      }
    }
}

